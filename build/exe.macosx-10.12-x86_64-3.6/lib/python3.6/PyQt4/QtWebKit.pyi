# The PEP 484 type hints stub file for the QtWebKit module.
#
# Generated by SIP 4.19.3
#
# Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
# 
# This file is part of PyQt4.
# 
# This file may be used under the terms of the GNU General Public License
# version 3.0 as published by the Free Software Foundation and appearing in
# the file LICENSE included in the packaging of this file.  Please review the
# following information to ensure the GNU General Public License version 3.0
# requirements will be met: http://www.gnu.org/copyleft/gpl.html.
# 
# If you do not wish to use this file under the terms of the GPL version 3.0
# then you may purchase a commercial license.  For more information contact
# info@riverbankcomputing.com.
# 
# This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
# WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


import typing
import sip

from PyQt4 import QtNetwork
from PyQt4 import QtGui
from PyQt4 import QtCore

# Support for QDate, QDateTime and QTime.
import datetime

# Convenient type aliases.
PYQT_SIGNAL = typing.Union[QtCore.pyqtSignal, QtCore.pyqtBoundSignal]
PYQT_SLOT = typing.Union[typing.Callable[..., None], QtCore.pyqtBoundSignal]

# Support for old-style signals and slots.
QT_SIGNAL = str
QT_SLOT = str


class QGraphicsWebView(QtGui.QGraphicsWidget):

    def __init__(self, parent: typing.Optional[QtGui.QGraphicsItem] = ...) -> None: ...

    def setRenderHint(self, hint: QtGui.QPainter.RenderHint, enabled: bool = ...) -> None: ...
    def setRenderHints(self, hints: QtGui.QPainter.RenderHints) -> None: ...
    def renderHints(self) -> QtGui.QPainter.RenderHints: ...
    def setTiledBackingStoreFrozen(self, frozen: bool) -> None: ...
    def isTiledBackingStoreFrozen(self) -> bool: ...
    def setResizesToContents(self, enabled: bool) -> None: ...
    def resizesToContents(self) -> bool: ...
    def sceneEvent(self, a0: QtCore.QEvent) -> bool: ...
    def focusNextPrevChild(self, next: bool) -> bool: ...
    def inputMethodEvent(self, a0: QtGui.QInputMethodEvent) -> None: ...
    def focusOutEvent(self, a0: QtGui.QFocusEvent) -> None: ...
    def focusInEvent(self, a0: QtGui.QFocusEvent) -> None: ...
    def dropEvent(self, a0: QtGui.QGraphicsSceneDragDropEvent) -> None: ...
    def dragMoveEvent(self, a0: QtGui.QGraphicsSceneDragDropEvent) -> None: ...
    def dragLeaveEvent(self, a0: QtGui.QGraphicsSceneDragDropEvent) -> None: ...
    def dragEnterEvent(self, a0: QtGui.QGraphicsSceneDragDropEvent) -> None: ...
    def contextMenuEvent(self, a0: QtGui.QGraphicsSceneContextMenuEvent) -> None: ...
    def keyReleaseEvent(self, a0: QtGui.QKeyEvent) -> None: ...
    def keyPressEvent(self, a0: QtGui.QKeyEvent) -> None: ...
    def wheelEvent(self, a0: QtGui.QGraphicsSceneWheelEvent) -> None: ...
    def hoverLeaveEvent(self, a0: QtGui.QGraphicsSceneHoverEvent) -> None: ...
    def hoverMoveEvent(self, a0: QtGui.QGraphicsSceneHoverEvent) -> None: ...
    def mouseMoveEvent(self, a0: QtGui.QGraphicsSceneMouseEvent) -> None: ...
    def mouseReleaseEvent(self, a0: QtGui.QGraphicsSceneMouseEvent) -> None: ...
    def mouseDoubleClickEvent(self, a0: QtGui.QGraphicsSceneMouseEvent) -> None: ...
    def mousePressEvent(self, a0: QtGui.QGraphicsSceneMouseEvent) -> None: ...
    def linkClicked(self, a0: QtCore.QUrl) -> None: ...
    def statusBarMessage(self, message: str) -> None: ...
    def iconChanged(self) -> None: ...
    def titleChanged(self, a0: str) -> None: ...
    def urlChanged(self, a0: QtCore.QUrl) -> None: ...
    def loadProgress(self, progress: int) -> None: ...
    def loadFinished(self, a0: bool) -> None: ...
    def loadStarted(self) -> None: ...
    def reload(self) -> None: ...
    def forward(self) -> None: ...
    def back(self) -> None: ...
    def stop(self) -> None: ...
    def inputMethodQuery(self, query: QtCore.Qt.InputMethodQuery) -> typing.Any: ...
    def sizeHint(self, which: QtCore.Qt.SizeHint, constraint: QtCore.QSizeF) -> QtCore.QSizeF: ...
    def event(self, a0: QtCore.QEvent) -> bool: ...
    def itemChange(self, change: QtGui.QGraphicsItem.GraphicsItemChange, value: typing.Any) -> typing.Any: ...
    def paint(self, painter: QtGui.QPainter, option: QtGui.QStyleOptionGraphicsItem, widget: typing.Optional[QtGui.QWidget] = ...) -> None: ...
    def updateGeometry(self) -> None: ...
    def setGeometry(self, rect: QtCore.QRectF) -> None: ...
    def findText(self, subString: str, options: 'QWebPage.FindFlags' = ...) -> bool: ...
    def triggerPageAction(self, action: 'QWebPage.WebAction', checked: bool = ...) -> None: ...
    def pageAction(self, action: 'QWebPage.WebAction') -> QtGui.QAction: ...
    def settings(self) -> 'QWebSettings': ...
    def history(self) -> 'QWebHistory': ...
    def setContent(self, data: typing.Union[QtCore.QByteArray, bytes, bytearray], mimeType: str = ..., baseUrl: QtCore.QUrl = ...) -> None: ...
    def setHtml(self, html: str, baseUrl: QtCore.QUrl = ...) -> None: ...
    @typing.overload
    def load(self, url: QtCore.QUrl) -> None: ...
    @typing.overload
    def load(self, request: QtNetwork.QNetworkRequest, operation: QtNetwork.QNetworkAccessManager.Operation = ..., body: typing.Union[QtCore.QByteArray, bytes, bytearray] = ...) -> None: ...
    def isModified(self) -> bool: ...
    def setZoomFactor(self, a0: float) -> None: ...
    def zoomFactor(self) -> float: ...
    def icon(self) -> QtGui.QIcon: ...
    def title(self) -> str: ...
    def setUrl(self, a0: QtCore.QUrl) -> None: ...
    def url(self) -> QtCore.QUrl: ...
    def setPage(self, a0: 'QWebPage') -> None: ...
    def page(self) -> 'QWebPage': ...


class QWebDatabase(sip.simplewrapper):

    def __init__(self, other: 'QWebDatabase') -> None: ...

    @staticmethod
    def removeAllDatabases() -> None: ...
    @staticmethod
    def removeDatabase(db: 'QWebDatabase') -> None: ...
    def origin(self) -> 'QWebSecurityOrigin': ...
    def fileName(self) -> str: ...
    def size(self) -> int: ...
    def expectedSize(self) -> int: ...
    def displayName(self) -> str: ...
    def name(self) -> str: ...


class QWebElement(sip.simplewrapper):

    class StyleResolveStrategy(int): ...
    InlineStyle = ... # type: 'QWebElement.StyleResolveStrategy'
    CascadedStyle = ... # type: 'QWebElement.StyleResolveStrategy'
    ComputedStyle = ... # type: 'QWebElement.StyleResolveStrategy'

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: 'QWebElement') -> None: ...

    @typing.overload
    def render(self, painter: QtGui.QPainter) -> None: ...
    @typing.overload
    def render(self, painter: QtGui.QPainter, clip: QtCore.QRect) -> None: ...
    def setStyleProperty(self, name: str, value: str) -> None: ...
    def styleProperty(self, name: str, strategy: 'QWebElement.StyleResolveStrategy') -> str: ...
    def evaluateJavaScript(self, scriptSource: str) -> typing.Any: ...
    def removeAllChildren(self) -> None: ...
    def removeFromDocument(self) -> None: ...
    def takeFromDocument(self) -> 'QWebElement': ...
    def clone(self) -> 'QWebElement': ...
    @typing.overload
    def replace(self, markup: str) -> None: ...
    @typing.overload
    def replace(self, element: 'QWebElement') -> None: ...
    @typing.overload
    def encloseWith(self, markup: str) -> None: ...
    @typing.overload
    def encloseWith(self, element: 'QWebElement') -> None: ...
    @typing.overload
    def encloseContentsWith(self, element: 'QWebElement') -> None: ...
    @typing.overload
    def encloseContentsWith(self, markup: str) -> None: ...
    @typing.overload
    def prependOutside(self, markup: str) -> None: ...
    @typing.overload
    def prependOutside(self, element: 'QWebElement') -> None: ...
    @typing.overload
    def appendOutside(self, markup: str) -> None: ...
    @typing.overload
    def appendOutside(self, element: 'QWebElement') -> None: ...
    @typing.overload
    def prependInside(self, markup: str) -> None: ...
    @typing.overload
    def prependInside(self, element: 'QWebElement') -> None: ...
    @typing.overload
    def appendInside(self, markup: str) -> None: ...
    @typing.overload
    def appendInside(self, element: 'QWebElement') -> None: ...
    def webFrame(self) -> 'QWebFrame': ...
    def document(self) -> 'QWebElement': ...
    def previousSibling(self) -> 'QWebElement': ...
    def nextSibling(self) -> 'QWebElement': ...
    def lastChild(self) -> 'QWebElement': ...
    def firstChild(self) -> 'QWebElement': ...
    def parent(self) -> 'QWebElement': ...
    def namespaceUri(self) -> str: ...
    def localName(self) -> str: ...
    def prefix(self) -> str: ...
    def tagName(self) -> str: ...
    def geometry(self) -> QtCore.QRect: ...
    def setFocus(self) -> None: ...
    def hasFocus(self) -> bool: ...
    def toggleClass(self, name: str) -> None: ...
    def removeClass(self, name: str) -> None: ...
    def addClass(self, name: str) -> None: ...
    def hasClass(self, name: str) -> bool: ...
    def classes(self) -> typing.List[str]: ...
    def attributeNames(self, namespaceUri: str = ...) -> typing.List[str]: ...
    def hasAttributes(self) -> bool: ...
    def removeAttributeNS(self, namespaceUri: str, name: str) -> None: ...
    def removeAttribute(self, name: str) -> None: ...
    def hasAttributeNS(self, namespaceUri: str, name: str) -> bool: ...
    def hasAttribute(self, name: str) -> bool: ...
    def attributeNS(self, namespaceUri: str, name: str, defaultValue: str = ...) -> str: ...
    def attribute(self, name: str, defaultValue: str = ...) -> str: ...
    def setAttributeNS(self, namespaceUri: str, name: str, value: str) -> None: ...
    def setAttribute(self, name: str, value: str) -> None: ...
    def toInnerXml(self) -> str: ...
    def setInnerXml(self, markup: str) -> None: ...
    def toOuterXml(self) -> str: ...
    def setOuterXml(self, markup: str) -> None: ...
    def toPlainText(self) -> str: ...
    def setPlainText(self, text: str) -> None: ...
    def findFirst(self, selectorQuery: str) -> 'QWebElement': ...
    def findAll(self, selectorQuery: str) -> 'QWebElementCollection': ...
    def isNull(self) -> bool: ...


class QWebElementCollection(sip.simplewrapper):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, contextElement: QWebElement, query: str) -> None: ...
    @typing.overload
    def __init__(self, a0: 'QWebElementCollection') -> None: ...

    def toList(self) -> typing.Any: ...
    def last(self) -> QWebElement: ...
    def first(self) -> QWebElement: ...
    def __getitem__(self, i: int) -> QWebElement: ...
    def at(self, i: int) -> QWebElement: ...
    def __len__(self) -> int: ...
    def count(self) -> int: ...
    def append(self, collection: 'QWebElementCollection') -> None: ...


class QWebHitTestResult(sip.simplewrapper):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, other: 'QWebHitTestResult') -> None: ...

    def element(self) -> QWebElement: ...
    def linkElement(self) -> QWebElement: ...
    def enclosingBlockElement(self) -> QWebElement: ...
    def boundingRect(self) -> QtCore.QRect: ...
    def frame(self) -> 'QWebFrame': ...
    def isContentSelected(self) -> bool: ...
    def isContentEditable(self) -> bool: ...
    def pixmap(self) -> QtGui.QPixmap: ...
    def imageUrl(self) -> QtCore.QUrl: ...
    def alternateText(self) -> str: ...
    def linkTargetFrame(self) -> 'QWebFrame': ...
    def linkTitle(self) -> QtCore.QUrl: ...
    def linkUrl(self) -> QtCore.QUrl: ...
    def linkText(self) -> str: ...
    def title(self) -> str: ...
    def pos(self) -> QtCore.QPoint: ...
    def isNull(self) -> bool: ...


class QWebFrame(QtCore.QObject):

    class RenderLayer(int): ...
    ContentsLayer = ... # type: 'QWebFrame.RenderLayer'
    ScrollBarLayer = ... # type: 'QWebFrame.RenderLayer'
    PanIconLayer = ... # type: 'QWebFrame.RenderLayer'
    AllLayers = ... # type: 'QWebFrame.RenderLayer'

    def scrollToAnchor(self, anchor: str) -> None: ...
    def pageChanged(self) -> None: ...
    def loadFinished(self, ok: bool) -> None: ...
    def loadStarted(self) -> None: ...
    def contentsSizeChanged(self, size: QtCore.QSize) -> None: ...
    def findFirstElement(self, selectorQuery: str) -> QWebElement: ...
    def findAllElements(self, selectorQuery: str) -> QWebElementCollection: ...
    def documentElement(self) -> QWebElement: ...
    def setFocus(self) -> None: ...
    def hasFocus(self) -> bool: ...
    def scrollBarGeometry(self, orientation: QtCore.Qt.Orientation) -> QtCore.QRect: ...
    def baseUrl(self) -> QtCore.QUrl: ...
    def requestedUrl(self) -> QtCore.QUrl: ...
    def securityOrigin(self) -> 'QWebSecurityOrigin': ...
    def setZoomFactor(self, factor: float) -> None: ...
    def zoomFactor(self) -> float: ...
    def setScrollPosition(self, pos: QtCore.QPoint) -> None: ...
    def scrollPosition(self) -> QtCore.QPoint: ...
    def scroll(self, a0: int, a1: int) -> None: ...
    def metaData(self) -> typing.Any: ...
    def iconChanged(self) -> None: ...
    def initialLayoutCompleted(self) -> None: ...
    def urlChanged(self, url: QtCore.QUrl) -> None: ...
    def titleChanged(self, title: str) -> None: ...
    def javaScriptWindowObjectCleared(self) -> None: ...
    def print(self, printer: QtGui.QPrinter) -> None: ...
    def print_(self, printer: QtGui.QPrinter) -> None: ...
    def evaluateJavaScript(self, scriptSource: str) -> typing.Any: ...
    def event(self, a0: QtCore.QEvent) -> bool: ...
    def hitTestContent(self, pos: QtCore.QPoint) -> QWebHitTestResult: ...
    def contentsSize(self) -> QtCore.QSize: ...
    def geometry(self) -> QtCore.QRect: ...
    def pos(self) -> QtCore.QPoint: ...
    def textSizeMultiplier(self) -> float: ...
    def setTextSizeMultiplier(self, factor: float) -> None: ...
    @typing.overload
    def render(self, painter: QtGui.QPainter, clip: QtGui.QRegion) -> None: ...
    @typing.overload
    def render(self, painter: QtGui.QPainter) -> None: ...
    @typing.overload
    def render(self, a0: QtGui.QPainter, layer: 'QWebFrame.RenderLayer', clip: QtGui.QRegion = ...) -> None: ...
    def scrollBarMaximum(self, orientation: QtCore.Qt.Orientation) -> int: ...
    def scrollBarMinimum(self, orientation: QtCore.Qt.Orientation) -> int: ...
    def scrollBarValue(self, orientation: QtCore.Qt.Orientation) -> int: ...
    def setScrollBarValue(self, orientation: QtCore.Qt.Orientation, value: int) -> None: ...
    def setScrollBarPolicy(self, orientation: QtCore.Qt.Orientation, policy: QtCore.Qt.ScrollBarPolicy) -> None: ...
    def scrollBarPolicy(self, orientation: QtCore.Qt.Orientation) -> QtCore.Qt.ScrollBarPolicy: ...
    def childFrames(self) -> typing.Any: ...
    def parentFrame(self) -> 'QWebFrame': ...
    def frameName(self) -> str: ...
    def icon(self) -> QtGui.QIcon: ...
    def url(self) -> QtCore.QUrl: ...
    def setUrl(self, url: QtCore.QUrl) -> None: ...
    def title(self) -> str: ...
    def renderTreeDump(self) -> str: ...
    def toPlainText(self) -> str: ...
    def toHtml(self) -> str: ...
    def addToJavaScriptWindowObject(self, name: str, object: QtCore.QObject) -> None: ...
    def setContent(self, data: typing.Union[QtCore.QByteArray, bytes, bytearray], mimeType: str = ..., baseUrl: QtCore.QUrl = ...) -> None: ...
    def setHtml(self, html: str, baseUrl: QtCore.QUrl = ...) -> None: ...
    @typing.overload
    def load(self, url: QtCore.QUrl) -> None: ...
    @typing.overload
    def load(self, request: QtNetwork.QNetworkRequest, operation: QtNetwork.QNetworkAccessManager.Operation = ..., body: typing.Union[QtCore.QByteArray, bytes, bytearray] = ...) -> None: ...
    def page(self) -> 'QWebPage': ...


class QWebHistoryItem(sip.simplewrapper):

    def __init__(self, other: 'QWebHistoryItem') -> None: ...

    def isValid(self) -> bool: ...
    def setUserData(self, userData: typing.Any) -> None: ...
    def userData(self) -> typing.Any: ...
    def icon(self) -> QtGui.QIcon: ...
    def lastVisited(self) -> QtCore.QDateTime: ...
    def title(self) -> str: ...
    def url(self) -> QtCore.QUrl: ...
    def originalUrl(self) -> QtCore.QUrl: ...


class QWebHistory(sip.simplewrapper):

    def setMaximumItemCount(self, count: int) -> None: ...
    def maximumItemCount(self) -> int: ...
    def currentItemIndex(self) -> int: ...
    def __len__(self) -> int: ...
    def count(self) -> int: ...
    def itemAt(self, i: int) -> QWebHistoryItem: ...
    def forwardItem(self) -> QWebHistoryItem: ...
    def currentItem(self) -> QWebHistoryItem: ...
    def backItem(self) -> QWebHistoryItem: ...
    def goToItem(self, item: QWebHistoryItem) -> None: ...
    def forward(self) -> None: ...
    def back(self) -> None: ...
    def canGoForward(self) -> bool: ...
    def canGoBack(self) -> bool: ...
    def forwardItems(self, maxItems: int) -> typing.List[QWebHistoryItem]: ...
    def backItems(self, maxItems: int) -> typing.List[QWebHistoryItem]: ...
    def items(self) -> typing.Any: ...
    def clear(self) -> None: ...


class QWebHistoryInterface(QtCore.QObject):

    def __init__(self, parent: typing.Optional[QtCore.QObject] = ...) -> None: ...

    def addHistoryEntry(self, url: str) -> None: ...
    def historyContains(self, url: str) -> bool: ...
    @staticmethod
    def defaultInterface() -> 'QWebHistoryInterface': ...
    @staticmethod
    def setDefaultInterface(defaultInterface: 'QWebHistoryInterface') -> None: ...


class QWebInspector(QtGui.QWidget):

    def __init__(self, parent: typing.Optional[QtGui.QWidget] = ...) -> None: ...

    def closeEvent(self, event: QtGui.QCloseEvent) -> None: ...
    def hideEvent(self, event: QtGui.QHideEvent) -> None: ...
    def showEvent(self, event: QtGui.QShowEvent) -> None: ...
    def resizeEvent(self, event: QtGui.QResizeEvent) -> None: ...
    def event(self, a0: QtCore.QEvent) -> bool: ...
    def sizeHint(self) -> QtCore.QSize: ...
    def page(self) -> 'QWebPage': ...
    def setPage(self, page: 'QWebPage') -> None: ...


class QWebPage(QtCore.QObject):

    class Feature(int): ...
    Notifications = ... # type: 'QWebPage.Feature'
    Geolocation = ... # type: 'QWebPage.Feature'

    class PermissionPolicy(int): ...
    PermissionUnknown = ... # type: 'QWebPage.PermissionPolicy'
    PermissionGrantedByUser = ... # type: 'QWebPage.PermissionPolicy'
    PermissionDeniedByUser = ... # type: 'QWebPage.PermissionPolicy'

    class ErrorDomain(int): ...
    QtNetwork = ... # type: 'QWebPage.ErrorDomain'
    Http = ... # type: 'QWebPage.ErrorDomain'
    WebKit = ... # type: 'QWebPage.ErrorDomain'

    class Extension(int): ...
    ChooseMultipleFilesExtension = ... # type: 'QWebPage.Extension'
    ErrorPageExtension = ... # type: 'QWebPage.Extension'

    class WebWindowType(int): ...
    WebBrowserWindow = ... # type: 'QWebPage.WebWindowType'
    WebModalDialog = ... # type: 'QWebPage.WebWindowType'

    class LinkDelegationPolicy(int): ...
    DontDelegateLinks = ... # type: 'QWebPage.LinkDelegationPolicy'
    DelegateExternalLinks = ... # type: 'QWebPage.LinkDelegationPolicy'
    DelegateAllLinks = ... # type: 'QWebPage.LinkDelegationPolicy'

    class FindFlag(int): ...
    FindBackward = ... # type: 'QWebPage.FindFlag'
    FindCaseSensitively = ... # type: 'QWebPage.FindFlag'
    FindWrapsAroundDocument = ... # type: 'QWebPage.FindFlag'
    HighlightAllOccurrences = ... # type: 'QWebPage.FindFlag'

    class WebAction(int): ...
    NoWebAction = ... # type: 'QWebPage.WebAction'
    OpenLink = ... # type: 'QWebPage.WebAction'
    OpenLinkInNewWindow = ... # type: 'QWebPage.WebAction'
    OpenFrameInNewWindow = ... # type: 'QWebPage.WebAction'
    DownloadLinkToDisk = ... # type: 'QWebPage.WebAction'
    CopyLinkToClipboard = ... # type: 'QWebPage.WebAction'
    OpenImageInNewWindow = ... # type: 'QWebPage.WebAction'
    DownloadImageToDisk = ... # type: 'QWebPage.WebAction'
    CopyImageToClipboard = ... # type: 'QWebPage.WebAction'
    Back = ... # type: 'QWebPage.WebAction'
    Forward = ... # type: 'QWebPage.WebAction'
    Stop = ... # type: 'QWebPage.WebAction'
    Reload = ... # type: 'QWebPage.WebAction'
    Cut = ... # type: 'QWebPage.WebAction'
    Copy = ... # type: 'QWebPage.WebAction'
    Paste = ... # type: 'QWebPage.WebAction'
    Undo = ... # type: 'QWebPage.WebAction'
    Redo = ... # type: 'QWebPage.WebAction'
    MoveToNextChar = ... # type: 'QWebPage.WebAction'
    MoveToPreviousChar = ... # type: 'QWebPage.WebAction'
    MoveToNextWord = ... # type: 'QWebPage.WebAction'
    MoveToPreviousWord = ... # type: 'QWebPage.WebAction'
    MoveToNextLine = ... # type: 'QWebPage.WebAction'
    MoveToPreviousLine = ... # type: 'QWebPage.WebAction'
    MoveToStartOfLine = ... # type: 'QWebPage.WebAction'
    MoveToEndOfLine = ... # type: 'QWebPage.WebAction'
    MoveToStartOfBlock = ... # type: 'QWebPage.WebAction'
    MoveToEndOfBlock = ... # type: 'QWebPage.WebAction'
    MoveToStartOfDocument = ... # type: 'QWebPage.WebAction'
    MoveToEndOfDocument = ... # type: 'QWebPage.WebAction'
    SelectNextChar = ... # type: 'QWebPage.WebAction'
    SelectPreviousChar = ... # type: 'QWebPage.WebAction'
    SelectNextWord = ... # type: 'QWebPage.WebAction'
    SelectPreviousWord = ... # type: 'QWebPage.WebAction'
    SelectNextLine = ... # type: 'QWebPage.WebAction'
    SelectPreviousLine = ... # type: 'QWebPage.WebAction'
    SelectStartOfLine = ... # type: 'QWebPage.WebAction'
    SelectEndOfLine = ... # type: 'QWebPage.WebAction'
    SelectStartOfBlock = ... # type: 'QWebPage.WebAction'
    SelectEndOfBlock = ... # type: 'QWebPage.WebAction'
    SelectStartOfDocument = ... # type: 'QWebPage.WebAction'
    SelectEndOfDocument = ... # type: 'QWebPage.WebAction'
    DeleteStartOfWord = ... # type: 'QWebPage.WebAction'
    DeleteEndOfWord = ... # type: 'QWebPage.WebAction'
    SetTextDirectionDefault = ... # type: 'QWebPage.WebAction'
    SetTextDirectionLeftToRight = ... # type: 'QWebPage.WebAction'
    SetTextDirectionRightToLeft = ... # type: 'QWebPage.WebAction'
    ToggleBold = ... # type: 'QWebPage.WebAction'
    ToggleItalic = ... # type: 'QWebPage.WebAction'
    ToggleUnderline = ... # type: 'QWebPage.WebAction'
    InspectElement = ... # type: 'QWebPage.WebAction'
    InsertParagraphSeparator = ... # type: 'QWebPage.WebAction'
    InsertLineSeparator = ... # type: 'QWebPage.WebAction'
    SelectAll = ... # type: 'QWebPage.WebAction'
    ReloadAndBypassCache = ... # type: 'QWebPage.WebAction'
    PasteAndMatchStyle = ... # type: 'QWebPage.WebAction'
    RemoveFormat = ... # type: 'QWebPage.WebAction'
    ToggleStrikethrough = ... # type: 'QWebPage.WebAction'
    ToggleSubscript = ... # type: 'QWebPage.WebAction'
    ToggleSuperscript = ... # type: 'QWebPage.WebAction'
    InsertUnorderedList = ... # type: 'QWebPage.WebAction'
    InsertOrderedList = ... # type: 'QWebPage.WebAction'
    Indent = ... # type: 'QWebPage.WebAction'
    Outdent = ... # type: 'QWebPage.WebAction'
    AlignCenter = ... # type: 'QWebPage.WebAction'
    AlignJustified = ... # type: 'QWebPage.WebAction'
    AlignLeft = ... # type: 'QWebPage.WebAction'
    AlignRight = ... # type: 'QWebPage.WebAction'
    StopScheduledPageRefresh = ... # type: 'QWebPage.WebAction'
    CopyImageUrlToClipboard = ... # type: 'QWebPage.WebAction'

    class NavigationType(int): ...
    NavigationTypeLinkClicked = ... # type: 'QWebPage.NavigationType'
    NavigationTypeFormSubmitted = ... # type: 'QWebPage.NavigationType'
    NavigationTypeBackOrForward = ... # type: 'QWebPage.NavigationType'
    NavigationTypeReload = ... # type: 'QWebPage.NavigationType'
    NavigationTypeFormResubmitted = ... # type: 'QWebPage.NavigationType'
    NavigationTypeOther = ... # type: 'QWebPage.NavigationType'

    class FindFlags(sip.simplewrapper):

        @typing.overload
        def __init__(self) -> None: ...
        @typing.overload
        def __init__(self, f: typing.Union['QWebPage.FindFlags', 'QWebPage.FindFlag']) -> None: ...
        @typing.overload
        def __init__(self, a0: 'QWebPage.FindFlags') -> None: ...

        def __bool__(self) -> int: ...
        def __invert__(self) -> 'QWebPage.FindFlags': ...
        def __int__(self) -> int: ...

    class ExtensionOption(sip.simplewrapper):

        @typing.overload
        def __init__(self) -> None: ...
        @typing.overload
        def __init__(self, a0: 'QWebPage.ExtensionOption') -> None: ...

    class ExtensionReturn(sip.simplewrapper):

        @typing.overload
        def __init__(self) -> None: ...
        @typing.overload
        def __init__(self, a0: 'QWebPage.ExtensionReturn') -> None: ...

    class ChooseMultipleFilesExtensionOption('QWebPage.ExtensionOption'):

        parentFrame = ... # type: QWebFrame
        suggestedFileNames = ... # type: typing.Sequence[str]

        @typing.overload
        def __init__(self) -> None: ...
        @typing.overload
        def __init__(self, a0: 'QWebPage.ChooseMultipleFilesExtensionOption') -> None: ...

    class ChooseMultipleFilesExtensionReturn('QWebPage.ExtensionReturn'):

        fileNames = ... # type: typing.Sequence[str]

        @typing.overload
        def __init__(self) -> None: ...
        @typing.overload
        def __init__(self, a0: 'QWebPage.ChooseMultipleFilesExtensionReturn') -> None: ...

    class ErrorPageExtensionOption('QWebPage.ExtensionOption'):

        domain = ... # type: 'QWebPage.ErrorDomain'
        error = ... # type: int
        errorString = ... # type: str
        frame = ... # type: QWebFrame
        url = ... # type: QtCore.QUrl

        @typing.overload
        def __init__(self) -> None: ...
        @typing.overload
        def __init__(self, a0: 'QWebPage.ErrorPageExtensionOption') -> None: ...

    class ErrorPageExtensionReturn('QWebPage.ExtensionReturn'):

        baseUrl = ... # type: QtCore.QUrl
        content = ... # type: typing.Union[QtCore.QByteArray, bytes, bytearray]
        contentType = ... # type: str
        encoding = ... # type: str

        @typing.overload
        def __init__(self) -> None: ...
        @typing.overload
        def __init__(self, a0: 'QWebPage.ErrorPageExtensionReturn') -> None: ...

    class ViewportAttributes(sip.simplewrapper):

        @typing.overload
        def __init__(self) -> None: ...
        @typing.overload
        def __init__(self, other: 'QWebPage.ViewportAttributes') -> None: ...

        def size(self) -> QtCore.QSize: ...
        def isValid(self) -> bool: ...
        def isUserScalable(self) -> bool: ...
        def devicePixelRatio(self) -> float: ...
        def maximumScaleFactor(self) -> float: ...
        def minimumScaleFactor(self) -> float: ...
        def initialScaleFactor(self) -> float: ...

    def __init__(self, parent: typing.Optional[QtCore.QObject] = ...) -> None: ...

    def featurePermissionRequestCanceled(self, frame: QWebFrame, feature: 'QWebPage.Feature') -> None: ...
    def featurePermissionRequested(self, frame: QWebFrame, feature: 'QWebPage.Feature') -> None: ...
    def viewportChangeRequested(self) -> None: ...
    def applicationCacheQuotaExceeded(self, origin: 'QWebSecurityOrigin', defaultOriginQuota: int) -> None: ...
    def supportsContentType(self, mimeType: str) -> bool: ...
    def supportedContentTypes(self) -> typing.List[str]: ...
    def setFeaturePermission(self, frame: QWebFrame, feature: 'QWebPage.Feature', policy: 'QWebPage.PermissionPolicy') -> None: ...
    def setActualVisibleContentRect(self, rect: QtCore.QRect) -> None: ...
    def viewportAttributesForSize(self, availableSize: QtCore.QSize) -> 'QWebPage.ViewportAttributes': ...
    def selectedHtml(self) -> str: ...
    def hasSelection(self) -> bool: ...
    def shouldInterruptJavaScript(self) -> bool: ...
    def setPreferredContentsSize(self, size: QtCore.QSize) -> None: ...
    def preferredContentsSize(self) -> QtCore.QSize: ...
    def frameAt(self, pos: QtCore.QPoint) -> QWebFrame: ...
    def restoreFrameStateRequested(self, frame: QWebFrame) -> None: ...
    def saveFrameStateRequested(self, frame: QWebFrame, item: QWebHistoryItem) -> None: ...
    def databaseQuotaExceeded(self, frame: QWebFrame, databaseName: str) -> None: ...
    def contentsChanged(self) -> None: ...
    def createStandardContextMenu(self) -> QtGui.QMenu: ...
    def isContentEditable(self) -> bool: ...
    def setContentEditable(self, editable: bool) -> None: ...
    def userAgentForUrl(self, url: QtCore.QUrl) -> str: ...
    def javaScriptConsoleMessage(self, message: str, lineNumber: int, sourceID: str) -> None: ...
    def javaScriptPrompt(self, originatingFrame: QWebFrame, msg: str, defaultValue: str) -> typing.Tuple[bool, str]: ...
    def javaScriptConfirm(self, originatingFrame: QWebFrame, msg: str) -> bool: ...
    def javaScriptAlert(self, originatingFrame: QWebFrame, msg: str) -> None: ...
    def chooseFile(self, originatingFrame: QWebFrame, oldFile: str) -> str: ...
    def acceptNavigationRequest(self, frame: QWebFrame, request: QtNetwork.QNetworkRequest, type: 'QWebPage.NavigationType') -> bool: ...
    def createPlugin(self, classid: str, url: QtCore.QUrl, paramNames: typing.Sequence[str], paramValues: typing.Sequence[str]) -> QtCore.QObject: ...
    def createWindow(self, type: 'QWebPage.WebWindowType') -> 'QWebPage': ...
    def microFocusChanged(self) -> None: ...
    def downloadRequested(self, request: QtNetwork.QNetworkRequest) -> None: ...
    def unsupportedContent(self, reply: QtNetwork.QNetworkReply) -> None: ...
    def menuBarVisibilityChangeRequested(self, visible: bool) -> None: ...
    def statusBarVisibilityChangeRequested(self, visible: bool) -> None: ...
    def toolBarVisibilityChangeRequested(self, visible: bool) -> None: ...
    def linkClicked(self, url: QtCore.QUrl) -> None: ...
    def printRequested(self, frame: QWebFrame) -> None: ...
    def windowCloseRequested(self) -> None: ...
    def scrollRequested(self, dx: int, dy: int, scrollViewRect: QtCore.QRect) -> None: ...
    def repaintRequested(self, dirtyRect: QtCore.QRect) -> None: ...
    def geometryChangeRequested(self, geom: QtCore.QRect) -> None: ...
    def frameCreated(self, frame: QWebFrame) -> None: ...
    def selectionChanged(self) -> None: ...
    def statusBarMessage(self, text: str) -> None: ...
    def linkHovered(self, link: str, title: str, textContent: str) -> None: ...
    def loadStarted(self) -> None: ...
    def loadProgress(self, progress: int) -> None: ...
    def loadFinished(self, ok: bool) -> None: ...
    def supportsExtension(self, extension: 'QWebPage.Extension') -> bool: ...
    def extension(self, extension: 'QWebPage.Extension', option: typing.Optional['QWebPage.ExtensionOption'] = ..., output: typing.Optional['QWebPage.ExtensionReturn'] = ...) -> bool: ...
    def updatePositionDependentActions(self, pos: QtCore.QPoint) -> None: ...
    def swallowContextMenuEvent(self, event: QtGui.QContextMenuEvent) -> bool: ...
    def palette(self) -> QtGui.QPalette: ...
    def setPalette(self, palette: QtGui.QPalette) -> None: ...
    def linkDelegationPolicy(self) -> 'QWebPage.LinkDelegationPolicy': ...
    def setLinkDelegationPolicy(self, policy: 'QWebPage.LinkDelegationPolicy') -> None: ...
    def forwardUnsupportedContent(self) -> bool: ...
    def setForwardUnsupportedContent(self, forward: bool) -> None: ...
    def findText(self, subString: str, options: 'QWebPage.FindFlags' = ...) -> bool: ...
    def inputMethodQuery(self, property: QtCore.Qt.InputMethodQuery) -> typing.Any: ...
    def focusNextPrevChild(self, next: bool) -> bool: ...
    def event(self, a0: QtCore.QEvent) -> bool: ...
    def setViewportSize(self, size: QtCore.QSize) -> None: ...
    def viewportSize(self) -> QtCore.QSize: ...
    def triggerAction(self, action: 'QWebPage.WebAction', checked: bool = ...) -> None: ...
    def action(self, action: 'QWebPage.WebAction') -> QtGui.QAction: ...
    def selectedText(self) -> str: ...
    def bytesReceived(self) -> int: ...
    def totalBytes(self) -> int: ...
    def pluginFactory(self) -> 'QWebPluginFactory': ...
    def setPluginFactory(self, factory: 'QWebPluginFactory') -> None: ...
    def networkAccessManager(self) -> QtNetwork.QNetworkAccessManager: ...
    def setNetworkAccessManager(self, manager: QtNetwork.QNetworkAccessManager) -> None: ...
    def undoStack(self) -> QtGui.QUndoStack: ...
    def isModified(self) -> bool: ...
    def view(self) -> QtGui.QWidget: ...
    def setView(self, view: QtGui.QWidget) -> None: ...
    def settings(self) -> 'QWebSettings': ...
    def history(self) -> QWebHistory: ...
    def currentFrame(self) -> QWebFrame: ...
    def mainFrame(self) -> QWebFrame: ...


class QWebPluginFactory(QtCore.QObject):

    class Extension(int): ...

    class MimeType(sip.simplewrapper):

        description = ... # type: str
        fileExtensions = ... # type: typing.Sequence[str]
        name = ... # type: str

        @typing.overload
        def __init__(self) -> None: ...
        @typing.overload
        def __init__(self, a0: 'QWebPluginFactory.MimeType') -> None: ...

    class Plugin(sip.simplewrapper):

        description = ... # type: str
        mimeTypes = ... # type: typing.Any
        name = ... # type: str

        @typing.overload
        def __init__(self) -> None: ...
        @typing.overload
        def __init__(self, a0: 'QWebPluginFactory.Plugin') -> None: ...

    class ExtensionOption(sip.simplewrapper):

        @typing.overload
        def __init__(self) -> None: ...
        @typing.overload
        def __init__(self, a0: 'QWebPluginFactory.ExtensionOption') -> None: ...

    class ExtensionReturn(sip.simplewrapper):

        @typing.overload
        def __init__(self) -> None: ...
        @typing.overload
        def __init__(self, a0: 'QWebPluginFactory.ExtensionReturn') -> None: ...

    def __init__(self, parent: typing.Optional[QtCore.QObject] = ...) -> None: ...

    def supportsExtension(self, extension: 'QWebPluginFactory.Extension') -> bool: ...
    def extension(self, extension: 'QWebPluginFactory.Extension', option: typing.Optional['QWebPluginFactory.ExtensionOption'] = ..., output: typing.Optional['QWebPluginFactory.ExtensionReturn'] = ...) -> bool: ...
    def create(self, mimeType: str, url: QtCore.QUrl, argumentNames: typing.Sequence[str], argumentValues: typing.Sequence[str]) -> QtCore.QObject: ...
    def refreshPlugins(self) -> None: ...
    def plugins(self) -> typing.Any: ...


class QWebSecurityOrigin(sip.simplewrapper):

    def __init__(self, other: 'QWebSecurityOrigin') -> None: ...

    def setApplicationCacheQuota(self, quota: int) -> None: ...
    @staticmethod
    def localSchemes() -> typing.List[str]: ...
    @staticmethod
    def removeLocalScheme(scheme: str) -> None: ...
    @staticmethod
    def addLocalScheme(scheme: str) -> None: ...
    def databases(self) -> typing.Any: ...
    def setDatabaseQuota(self, quota: int) -> None: ...
    def databaseQuota(self) -> int: ...
    def databaseUsage(self) -> int: ...
    def port(self) -> int: ...
    def host(self) -> str: ...
    def scheme(self) -> str: ...
    @staticmethod
    def allOrigins() -> typing.Any: ...


class QWebSettings(sip.simplewrapper):

    class FontSize(int): ...
    MinimumFontSize = ... # type: 'QWebSettings.FontSize'
    MinimumLogicalFontSize = ... # type: 'QWebSettings.FontSize'
    DefaultFontSize = ... # type: 'QWebSettings.FontSize'
    DefaultFixedFontSize = ... # type: 'QWebSettings.FontSize'

    class WebGraphic(int): ...
    MissingImageGraphic = ... # type: 'QWebSettings.WebGraphic'
    MissingPluginGraphic = ... # type: 'QWebSettings.WebGraphic'
    DefaultFrameIconGraphic = ... # type: 'QWebSettings.WebGraphic'
    TextAreaSizeGripCornerGraphic = ... # type: 'QWebSettings.WebGraphic'
    InputSpeechButtonGraphic = ... # type: 'QWebSettings.WebGraphic'
    SearchCancelButtonGraphic = ... # type: 'QWebSettings.WebGraphic'
    SearchCancelButtonPressedGraphic = ... # type: 'QWebSettings.WebGraphic'

    class WebAttribute(int): ...
    AutoLoadImages = ... # type: 'QWebSettings.WebAttribute'
    JavascriptEnabled = ... # type: 'QWebSettings.WebAttribute'
    JavaEnabled = ... # type: 'QWebSettings.WebAttribute'
    PluginsEnabled = ... # type: 'QWebSettings.WebAttribute'
    PrivateBrowsingEnabled = ... # type: 'QWebSettings.WebAttribute'
    JavascriptCanOpenWindows = ... # type: 'QWebSettings.WebAttribute'
    JavascriptCanCloseWindows = ... # type: 'QWebSettings.WebAttribute'
    JavascriptCanAccessClipboard = ... # type: 'QWebSettings.WebAttribute'
    DeveloperExtrasEnabled = ... # type: 'QWebSettings.WebAttribute'
    LinksIncludedInFocusChain = ... # type: 'QWebSettings.WebAttribute'
    ZoomTextOnly = ... # type: 'QWebSettings.WebAttribute'
    PrintElementBackgrounds = ... # type: 'QWebSettings.WebAttribute'
    OfflineStorageDatabaseEnabled = ... # type: 'QWebSettings.WebAttribute'
    OfflineWebApplicationCacheEnabled = ... # type: 'QWebSettings.WebAttribute'
    LocalStorageDatabaseEnabled = ... # type: 'QWebSettings.WebAttribute'
    LocalStorageEnabled = ... # type: 'QWebSettings.WebAttribute'
    LocalContentCanAccessRemoteUrls = ... # type: 'QWebSettings.WebAttribute'
    DnsPrefetchEnabled = ... # type: 'QWebSettings.WebAttribute'
    XSSAuditingEnabled = ... # type: 'QWebSettings.WebAttribute'
    AcceleratedCompositingEnabled = ... # type: 'QWebSettings.WebAttribute'
    SpatialNavigationEnabled = ... # type: 'QWebSettings.WebAttribute'
    LocalContentCanAccessFileUrls = ... # type: 'QWebSettings.WebAttribute'
    TiledBackingStoreEnabled = ... # type: 'QWebSettings.WebAttribute'
    FrameFlatteningEnabled = ... # type: 'QWebSettings.WebAttribute'
    SiteSpecificQuirksEnabled = ... # type: 'QWebSettings.WebAttribute'
    WebGLEnabled = ... # type: 'QWebSettings.WebAttribute'
    HyperlinkAuditingEnabled = ... # type: 'QWebSettings.WebAttribute'

    class FontFamily(int): ...
    StandardFont = ... # type: 'QWebSettings.FontFamily'
    FixedFont = ... # type: 'QWebSettings.FontFamily'
    SerifFont = ... # type: 'QWebSettings.FontFamily'
    SansSerifFont = ... # type: 'QWebSettings.FontFamily'
    CursiveFont = ... # type: 'QWebSettings.FontFamily'
    FantasyFont = ... # type: 'QWebSettings.FontFamily'

    @staticmethod
    def enablePersistentStorage(path: str = ...) -> None: ...
    @staticmethod
    def clearMemoryCaches() -> None: ...
    def localStoragePath(self) -> str: ...
    def setLocalStoragePath(self, path: str) -> None: ...
    @staticmethod
    def offlineWebApplicationCacheQuota() -> int: ...
    @staticmethod
    def setOfflineWebApplicationCacheQuota(maximumSize: int) -> None: ...
    @staticmethod
    def offlineWebApplicationCachePath() -> str: ...
    @staticmethod
    def setOfflineWebApplicationCachePath(path: str) -> None: ...
    def defaultTextEncoding(self) -> str: ...
    def setDefaultTextEncoding(self, encoding: str) -> None: ...
    @staticmethod
    def offlineStorageDefaultQuota() -> int: ...
    @staticmethod
    def setOfflineStorageDefaultQuota(maximumSize: int) -> None: ...
    @staticmethod
    def offlineStoragePath() -> str: ...
    @staticmethod
    def setOfflineStoragePath(path: str) -> None: ...
    @staticmethod
    def setObjectCacheCapacities(cacheMinDeadCapacity: int, cacheMaxDead: int, totalCapacity: int) -> None: ...
    @staticmethod
    def maximumPagesInCache() -> int: ...
    @staticmethod
    def setMaximumPagesInCache(pages: int) -> None: ...
    @staticmethod
    def webGraphic(type: 'QWebSettings.WebGraphic') -> QtGui.QPixmap: ...
    @staticmethod
    def setWebGraphic(type: 'QWebSettings.WebGraphic', graphic: QtGui.QPixmap) -> None: ...
    @staticmethod
    def iconForUrl(url: QtCore.QUrl) -> QtGui.QIcon: ...
    @staticmethod
    def clearIconDatabase() -> None: ...
    @staticmethod
    def iconDatabasePath() -> str: ...
    @staticmethod
    def setIconDatabasePath(location: str) -> None: ...
    def userStyleSheetUrl(self) -> QtCore.QUrl: ...
    def setUserStyleSheetUrl(self, location: QtCore.QUrl) -> None: ...
    def resetAttribute(self, attr: 'QWebSettings.WebAttribute') -> None: ...
    def testAttribute(self, attr: 'QWebSettings.WebAttribute') -> bool: ...
    def setAttribute(self, attr: 'QWebSettings.WebAttribute', on: bool) -> None: ...
    def resetFontSize(self, type: 'QWebSettings.FontSize') -> None: ...
    def fontSize(self, type: 'QWebSettings.FontSize') -> int: ...
    def setFontSize(self, type: 'QWebSettings.FontSize', size: int) -> None: ...
    def resetFontFamily(self, which: 'QWebSettings.FontFamily') -> None: ...
    def fontFamily(self, which: 'QWebSettings.FontFamily') -> str: ...
    def setFontFamily(self, which: 'QWebSettings.FontFamily', family: str) -> None: ...
    @staticmethod
    def globalSettings() -> 'QWebSettings': ...


class QWebView(QtGui.QWidget):

    def __init__(self, parent: typing.Optional[QtGui.QWidget] = ...) -> None: ...

    def selectedHtml(self) -> str: ...
    def hasSelection(self) -> bool: ...
    def setRenderHint(self, hint: QtGui.QPainter.RenderHint, enabled: bool = ...) -> None: ...
    def setRenderHints(self, hints: QtGui.QPainter.RenderHints) -> None: ...
    def renderHints(self) -> QtGui.QPainter.RenderHints: ...
    def setZoomFactor(self, factor: float) -> None: ...
    def zoomFactor(self) -> float: ...
    def focusNextPrevChild(self, next: bool) -> bool: ...
    def inputMethodEvent(self, a0: QtGui.QInputMethodEvent) -> None: ...
    def focusOutEvent(self, a0: QtGui.QFocusEvent) -> None: ...
    def focusInEvent(self, a0: QtGui.QFocusEvent) -> None: ...
    def dropEvent(self, a0: QtGui.QDropEvent) -> None: ...
    def dragMoveEvent(self, a0: QtGui.QDragMoveEvent) -> None: ...
    def dragLeaveEvent(self, a0: QtGui.QDragLeaveEvent) -> None: ...
    def dragEnterEvent(self, a0: QtGui.QDragEnterEvent) -> None: ...
    def keyReleaseEvent(self, a0: QtGui.QKeyEvent) -> None: ...
    def keyPressEvent(self, a0: QtGui.QKeyEvent) -> None: ...
    def wheelEvent(self, a0: QtGui.QWheelEvent) -> None: ...
    def contextMenuEvent(self, a0: QtGui.QContextMenuEvent) -> None: ...
    def mouseReleaseEvent(self, a0: QtGui.QMouseEvent) -> None: ...
    def mouseDoubleClickEvent(self, a0: QtGui.QMouseEvent) -> None: ...
    def mousePressEvent(self, a0: QtGui.QMouseEvent) -> None: ...
    def mouseMoveEvent(self, a0: QtGui.QMouseEvent) -> None: ...
    def changeEvent(self, a0: QtCore.QEvent) -> None: ...
    def paintEvent(self, ev: QtGui.QPaintEvent) -> None: ...
    def resizeEvent(self, e: QtGui.QResizeEvent) -> None: ...
    def createWindow(self, type: QWebPage.WebWindowType) -> 'QWebView': ...
    def urlChanged(self, url: QtCore.QUrl) -> None: ...
    def iconChanged(self) -> None: ...
    def selectionChanged(self) -> None: ...
    def linkClicked(self, url: QtCore.QUrl) -> None: ...
    def statusBarMessage(self, text: str) -> None: ...
    def titleChanged(self, title: str) -> None: ...
    def loadFinished(self, a0: bool) -> None: ...
    def loadProgress(self, progress: int) -> None: ...
    def loadStarted(self) -> None: ...
    def print(self, printer: QtGui.QPrinter) -> None: ...
    def print_(self, printer: QtGui.QPrinter) -> None: ...
    def reload(self) -> None: ...
    def forward(self) -> None: ...
    def back(self) -> None: ...
    def stop(self) -> None: ...
    def event(self, a0: QtCore.QEvent) -> bool: ...
    def findText(self, subString: str, options: QWebPage.FindFlags = ...) -> bool: ...
    def textSizeMultiplier(self) -> float: ...
    def setTextSizeMultiplier(self, factor: float) -> None: ...
    def sizeHint(self) -> QtCore.QSize: ...
    def inputMethodQuery(self, property: QtCore.Qt.InputMethodQuery) -> typing.Any: ...
    def isModified(self) -> bool: ...
    def triggerPageAction(self, action: QWebPage.WebAction, checked: bool = ...) -> None: ...
    def pageAction(self, action: QWebPage.WebAction) -> QtGui.QAction: ...
    def selectedText(self) -> str: ...
    def icon(self) -> QtGui.QIcon: ...
    def url(self) -> QtCore.QUrl: ...
    def setUrl(self, url: QtCore.QUrl) -> None: ...
    def title(self) -> str: ...
    def settings(self) -> QWebSettings: ...
    def history(self) -> QWebHistory: ...
    def setContent(self, data: typing.Union[QtCore.QByteArray, bytes, bytearray], mimeType: str = ..., baseUrl: QtCore.QUrl = ...) -> None: ...
    def setHtml(self, html: str, baseUrl: QtCore.QUrl = ...) -> None: ...
    @typing.overload
    def load(self, url: QtCore.QUrl) -> None: ...
    @typing.overload
    def load(self, request: QtNetwork.QNetworkRequest, operation: QtNetwork.QNetworkAccessManager.Operation = ..., body: typing.Union[QtCore.QByteArray, bytes, bytearray] = ...) -> None: ...
    def setPage(self, page: QWebPage) -> None: ...
    def page(self) -> QWebPage: ...


def qWebKitMinorVersion() -> int: ...
def qWebKitMajorVersion() -> int: ...
def qWebKitVersion() -> str: ...
